#!/bin/sh

# Prints all batteries, their percentage remaining and an emoji corresponding
# to charge status (üîå for plugged up, üîã for discharging on battery, etc.).

case $BLOCK_BUTTON in
    1) notify-send "üîã Battery life" "$(acpi -i | head -n 1 | cut -d' ' -f3,5-)" ;;
    2) p-switch ;;
    3) notify-send "üîã Battery module" "üîã: discharging
üõë: not charging
‚ôª: stagnant charge
üîå: charging
‚ö°: charged
‚ùó: battery very low!
- Scroll to change adjust xbacklight." ;;
    4) xbacklight -inc 10 ;;
    5) xbacklight -dec 10 ;;
		6) setsid -f "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# Loop through all attached batteries and format the info
for battery in /sys/class/power_supply/BAT?*; do
    # If non-first battery, print a space separator.
    [ -n "${capacity+x}" ] && printf " "
    # Sets up the status and capacity
    case "$(cat "$battery/status" 2>&1)" in
        "Full") status="‚ö°" ;;
        "Discharging") status="üîã" ;;
        "Charging") status="üîå" ;;
        "Not charging") status="üõë" ;;
        "Unknown") status="‚ôªÔ∏è" ;;
        *) exit 1 ;;
    esac
    capacity="$(cat "$battery/capacity" 2>&1)"
    # Will make a warn variable if discharging and low
    [ "$status" = "üîã" ] && [ "$capacity" -le 10 ] && warn="‚ùó" && cvlc --play-and-exit ~/.local/bin/statusbar/battery.wav

    freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq)
    low=1200000
    medium=2600000
    high=3400000
    if [ "$freq" -eq "$low" ]; then
        performance=LP
    elif [ "$freq" -eq "$medium" ]; then
        performance=MP
    elif [ "$freq" -eq "$high" ]; then
        performance=HP
    else
        performance=FP
    fi
    # Prints the info
    printf "%s%s%d%%%s" "$status" "$warn" "$capacity" "($performance)"
    unset warn
done && printf "\\n"
